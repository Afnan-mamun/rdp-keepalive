import os
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains

# --- ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржерзЗржХрзЗ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рждржерзНржп ---
# ржПржЗ ржорж╛ржиржЧрзБрж▓рзЛ Render.com ржПрж░ рж╕рзЗржЯрж┐ржВрж╕рзЗ (Environment Variables) ржжрж┐рждрзЗ рж╣ржмрзЗ
COOKIE_NAME = "WorkstationJwtPartitioned"
COOKIE_VALUE = os.getenv("COOKIE_VALUE")
TARGET_URL = os.getenv("TARGET_URL")
VNC_URL_PREFIX = "https://80-firebase-second" # VNC URL ржПрж░ рж╢рзБрж░рзБрж░ ржЕржВрж╢

# --- Selenium рж╕рзЗржЯржЖржк ---
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--disable-gpu")

driver = webdriver.Chrome(options=chrome_options)

# ржзрж╛ржк рзз: ржкрзНрж░ржержо URL-ржП ржпрж╛ржУржпрж╝рж╛ ржПржмржВ ржХрзБржХрж┐ ржпрзЛржЧ ржХрж░рж╛
driver.get(TARGET_URL)
cookie = {
    'name': COOKIE_NAME,
    'value': COOKIE_VALUE,
    'domain': ".google.com",
    'path': '/',
    'secure': True,
}
driver.add_cookie(cookie)
driver.refresh() # ржХрзБржХрж┐ ржХрж╛рж░рзНржпржХрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржкрзНрж░ржержо рж░рж┐ржлрзНрж░рзЗрж╢
print("тЬЕ ржХрзБржХрж┐ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржкрзНрж░ржержо ржкрзЗржЬ рж░рж┐рж▓рзЛржб ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ...")

# ржзрж╛ржк рзи: main-target ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж╛ ржПржмржВ ржжрзНржмрж┐рждрзАржпрж╝ ржкрзЗржЬ рж▓рзЛржб рж╣ржУрзЯрж╛ ржкрж░рзНржпржирзНржд ржЕржкрзЗржХрзНрж╖рж╛
try:
    wait = WebDriverWait(driver, 20)
    button = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, "main-target")))
    button.click()
    print("ЁЯЪА ржЖрж░ржбрж┐ржкрж┐ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣рж▓рзЛ (main-target ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ)")
    
    # ржжрзНржмрж┐рждрзАржпрж╝ ржкрзЗржЬ рж▓рзЛржб рж╣ржУржпрж╝рж╛ ржкрж░рзНржпржирзНржд ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ (studio.firebase.google.com/second-...)
    wait.until(EC.url_contains("/second-"))
    print("ЁЯМР ржжрзНржмрж┐рждрзАржпрж╝ ржкрзЗржЬ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ: " + driver.current_url)

    # ржПржЦржи VNC ржкрзЗржЬ рж▓рзЛржб рж╣ржУрзЯрж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛
    VNC_LOAD_TIMEOUT = 45 # VNC рж▓рзЛржб рж╣ржУрзЯрж╛рж░ ржЬржирзНржп рж╕рж░рзНржмрзЛржЪрзНржЪ ржЕржкрзЗржХрзНрж╖рж╛ (рж╕рзЗржХрзЗржирзНржбрзЗ)
    start_time = time.time()
    vnc_loaded = False
    while time.time() - start_time < VNC_LOAD_TIMEOUT:
        if driver.current_url.startswith(VNC_URL_PREFIX):
            try:
                # VNC ржХрзНржпрж╛ржиржнрж╛рж╕ ржПрж▓рж┐ржорзЗржирзНржЯ рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржЪрзЗржХ ржХрж░рж╛
                WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located((By.TAG_NAME, "canvas"))
                )
                vnc_loaded = True
                break
            except:
                pass # ржХрзНржпрж╛ржиржнрж╛рж╕ ржПржЦржиржУ рж▓рзЛржб рж╣рзЯржирж┐, ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи
        time.sleep(1) # ржкрзНрж░рждрж┐ рж╕рзЗржХрзЗржирзНржбрзЗ ржЪрзЗржХ ржХрж░рзБржи

    if vnc_loaded:
        print("тЬЕ VNC рж░рж┐ржорзЛржЯ ржЙржмрзБржирзНржЯрзБ рж╕рж┐рж╕рзНржЯрзЗржо рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ: " + driver.current_url)
    else:
        print("тЭМ VNC ржкрзЗржЬ рж▓рзЛржб рж╣рждрзЗ ржмрзНржпрж░рзНрже ржмрж╛ ржХрзНржпрж╛ржиржнрж╛рж╕ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржмрж░рзНрждржорж╛ржи URL: " + driver.current_url)
        driver.quit()
        exit()

except Exception as e:
    print(f"тЭМ ржкрзНрж░рж╛ржержорж┐ржХ ржзрж╛ржк рж╕ржорзНржкржирзНржи ржХрж░рж╛ ржпрж╛рзЯржирж┐: {e}")
    driver.quit()
    exit()

# --- VNC ржкрзЗржЬрзЗ рж╕ржХрзНрж░рж┐ржпрж╝ ржерж╛ржХрж╛рж░ ржЬржирзНржп рж▓рзБржк ---
while True:
    try:
        # 1. VNC ржХрзНржпрж╛ржиржнрж╛рж╕ ржПрж▓рж┐ржорзЗржирзНржЯ рж╕ржирж╛ржХрзНржд ржХрж░рж╛
        vnc_canvas = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "canvas"))
        )
        print("ЁЯОи VNC ржХрзНржпрж╛ржиржнрж╛рж╕ ржПрж▓рж┐ржорзЗржирзНржЯ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗред")

        actions = ActionChains(driver)

        # 2. ржХрзНржпрж╛ржиржнрж╛рж╕рзЗрж░ ржЙржкрж░ ржорж╛ржЙрж╕ ржиржбрж╝рж╛ржЪржбрж╝рж╛ рж╕рж┐ржорзБрж▓рзЗржЯ ржХрж░рж╛
        actions.move_to_element(vnc_canvas).perform()
        print("ЁЯЦ▒я╕П ржХрж╛рж░рзНрж╕рж░ VNC ржХрзНржпрж╛ржиржнрж╛рж╕рзЗрж░ ржХрзЗржирзНржжрзНрж░рзЗ ржирзЗржУрзЯрж╛ рж╣рж▓рзЛред")
        time.sleep(2)

        for _ in range(3): # 3ржЯрж┐ ржнрж┐ржирзНржи рж╕рзНржерж╛ржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи
            x_offset = int(vnc_canvas.size['width'] * (0.2 + 0.6 * (time.time() % 1)))
            y_offset = int(vnc_canvas.size['height'] * (0.2 + 0.6 * (time.time() % 1)))

            actions.move_to_element_with_offset(vnc_canvas, x_offset, y_offset).click().perform()
            print(f"ЁЯЦ▒я╕П ржХрзНржпрж╛ржиржнрж╛рж╕рзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж╛ рж╣рж▓рзЛ (ржЕржлрж╕рзЗржЯ: {x_offset}, {y_offset})ред")
            time.sleep(2)

        # 3. ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ ржоржзрзНржпрзЗ рж╕рзНржХрзНрж░рж▓ ржХрж░рж╛ (ржпржжрж┐ VNC ржкрзЗржЬ рж╕рзНржХрзНрж░рж▓ржпрзЛржЧрзНржп рж╣ржпрж╝)
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        print("тПм ржкрзЗржЬ ржирж┐ржЪрзЗ рж╕рзНржХрзНрж░рж▓ ржХрж░рж╛ рж╣рж▓рзЛред")
        time.sleep(1)
        driver.execute_script("window.scrollTo(0, 0);")
        print("тПл ржкрзЗржЬ ржЙржкрж░рзЗ рж╕рзНржХрзНрж░рж▓ ржХрж░рж╛ рж╣рж▓рзЛред")

    except Exception as e:
        print(f"тЭМ VNC рж╕рзЗрж╢ржи рж╕ржХрзНрж░рж┐ржпрж╝ рж░рж╛ржЦрж╛рж░ ржХрж╛рж░рзНржпржХрж▓рж╛ржк ржмрзНржпрж░рзНрже: {e}")

    finally:
        time.sleep(300) # рзл ржорж┐ржирж┐ржЯ ржЕржкрзЗржХрзНрж╖рж╛ (ржЖржкржирж╛рж░ ржкрзНрж░рзЯрзЛржЬржи ржЕржирзБржпрж╛рзЯрзА ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи)
